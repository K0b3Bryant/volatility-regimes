# -*- coding: utf-8 -*-
"""
KAMA and Regime Modeling for Trading Strategies
---
This script demonstrates a combined approach using a KAMA-based technical signal and regime signals via Markov models.

Structure:
1. Requirements
2. Setup and Imports
3. Data Loading
4. Feature Engineering
5. Model Training and Optimization
6. Evaluation and Visualization
"""

# === 1. Requirements ===
# Ensure dependencies are in `requirements.txt`
# Example: tsfracdiff, optuna, ta, hmmlearn, scipy, PyWavelets
# Install using: pip install -r requirements.txt

# === 2. Setup and Imports ===
import warnings
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import statsmodels.api as sm
from hmmlearn import hmm
from ta.momentum import KAMAIndicator
import optuna

# Suppress warnings for clean output
warnings.filterwarnings("ignore", category=RuntimeWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Global configurations
random_state = 42
np.random.seed(random_state)

# === 3. Data Loading ===
# Define file paths (to be adjusted for local environment)
data_files = {
    'spx': '/content/SPX.csv',
    'vix': '/content/VIX.csv',
    'features_5d': '/content/features_5d.csv',
    'features_ta': '/content/features_ta.csv'
}

# Load datasets
def load_data():
    spx = pd.read_csv(data_files['spx'], parse_dates=['Date'], index_col=0).sort_index().astype(float)
    vix = pd.read_csv(data_files['vix'], parse_dates=['Date'], index_col=0).sort_index().astype(float)
    features_5d = pd.read_csv(data_files['features_5d'], parse_dates=['date'], index_col=0).sort_index()
    features_ta = pd.read_csv(data_files['features_ta'], index_col=0, parse_dates=True).sort_index()

    # Preprocessing
    spx.rename(columns={'Last Price': 'price'}, inplace=True)
    spx.drop(['Volume'], axis=1, inplace=True)
    vix.rename(columns={'VIX': 'vix'}, inplace=True)
    vix.drop(['First', 'Last'], axis=1, inplace=True)
    vix = vix.groupby(vix.index).mean()  # Eliminate duplicates

    features_5d.drop(columns=['date', 'underlying', 'price'], inplace=True)
    
    raw = pd.concat([spx, vix, features_5d, features_ta], axis=1)
    return raw

raw = load_data()

# === 4. Feature Engineering ===
# Example: Adding rolling statistics, log returns, and volatility measures

# Log transformations
raw['log_price'] = np.log(raw['price']).fillna(method='ffill')
raw['r'] = raw['price'].pct_change().fillna(method='ffill')
raw['log_r'] = np.log(raw['price'].pct_change() + 1).fillna(method='ffill')

# Volatility measures
for window in [2, 3, 5]:
    raw[f'r__vol_{window}d'] = raw['r'].rolling(window=window).std() * np.sqrt(252/window)
    raw[f'log_r__vol_{window}d'] = raw['log_r'].rolling(window=window).std() * np.sqrt(252/window)

# Standardize data
scaler = StandardScaler()
transformed_data = scaler.fit_transform(raw.select_dtypes(include=[np.number]))
transformed_data = pd.DataFrame(transformed_data, columns=raw.select_dtypes(include=[np.number]).columns, index=raw.index)

# === 5. Model Training and Optimization ===
# Example: KAMA optimization using Optuna

def kama_signals(data, fast, slow, signal_window):
    kama = KAMAIndicator(close=data, window_slow=slow, window_fast=fast, window=signal_window).kama()
    return kama

# Placeholder for Optuna optimization
# Define trials, objective function, and study direction

# === 6. Evaluation and Visualization ===
# Include metrics such as Sharpe Ratio, Compounded Returns, and visualizations

def evaluate_model(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    print(f"MSE: {mse}, MAE: {mae}, R^2: {r2}")

# Visualization example
plt.figure(figsize=(10, 6))
plt.plot(raw['price'], label='Price')
plt.title('Price Over Time')
plt.legend()
plt.show()

# Entry point
if __name__ == "__main__":
    print("Starting KAMA Model Script")
    # Main execution flow here
